name: Integration Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd screencastcms
        pip install -r requirements.txt
        pip install requests
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Start Django Backend
      run: |
        cd screencastcms
        python manage.py migrate
        python manage.py collectstatic --noinput || echo "Static files collection skipped"
        python manage.py runserver 8001 &
        echo $! > django.pid
        sleep 10
        echo "Django server started"
    
    - name: Start Node.js Frontend
      run: |
        npm start &
        echo $! > nodejs.pid
        sleep 5
        echo "Node.js server started"
    
    - name: Test Django Backend Health
      run: |
        echo "üîç Testing Django backend..."
        # Test Django admin (should redirect to login)
        if curl -f -s http://localhost:8001/admin/ > /dev/null; then
          echo "‚úÖ Django admin accessible"
        else
          echo "‚ö†Ô∏è Django admin not accessible (may be normal)"
        fi
        
        # Test Django API endpoints
        if curl -f -s http://localhost:8001/api/ > /dev/null 2>&1; then
          echo "‚úÖ Django API accessible"
        else
          echo "‚ö†Ô∏è Django API endpoint not found (may not be configured)"
        fi
    
    - name: Test Node.js Frontend Health
      run: |
        echo "üîç Testing Node.js frontend..."
        if curl -f -s http://localhost:3000 > /dev/null; then
          echo "‚úÖ Node.js frontend accessible"
        else
          echo "‚ùå Node.js frontend not accessible"
          exit 1
        fi
        
        # Test specific routes
        routes=("/" "/projects" "/skills" "/experience" "/contact")
        for route in "${routes[@]}"; do
          if curl -f -s "http://localhost:3000$route" > /dev/null; then
            echo "‚úÖ Route $route accessible"
          else
            echo "‚ö†Ô∏è Route $route not accessible (may not be implemented)"
          fi
        done
    
    - name: Test Frontend-Backend Integration
      run: |
        echo "üîç Testing frontend-backend integration..."

        # Simple integration test using curl
        echo "Testing Django backend..."
        curl -f -s http://localhost:8001/ > /dev/null && echo "‚úÖ Django backend responding" || echo "‚ö†Ô∏è Django backend not responding"

        echo "Testing Node.js frontend..."
        curl -f -s http://localhost:3000/ > /dev/null && echo "‚úÖ Node.js frontend responding" || echo "‚ö†Ô∏è Node.js frontend not responding"

        echo "‚úÖ Integration test completed"
    
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up processes..."
        if [ -f django.pid ]; then
          kill $(cat django.pid) || true
          rm django.pid
        fi
        if [ -f nodejs.pid ]; then
          kill $(cat nodejs.pid) || true
          rm nodejs.pid
        fi
        # Kill any remaining processes
        pkill -f "python manage.py runserver" || true
        pkill -f "node index.js" || true
        echo "‚úÖ Cleanup completed"
